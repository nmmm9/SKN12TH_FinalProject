version: '3.8'

services:
  # ===== 데이터베이스 =====
  postgres:
    image: postgres:15-alpine
    container_name: ddalkkak-postgres
    environment:
      POSTGRES_DB: ddalkkak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ddalkkak2024!
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ===== 캐시 & 메시지 큐 =====
  redis:
    image: redis:7-alpine
    container_name: ddalkkak-redis
    command: redis-server --appendonly yes --requirepass ddalkkak2024!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ===== AI 엔진 (Python FastAPI) =====
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: ddalkkak-ai-engine
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - DB_URL=postgresql://postgres:ddalkkak2024!@postgres:5432/ddalkkak
    ports:
      - "8001:8001"
    volumes:
      - ./ai-engine:/app
      - ai_models:/app/models
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ===== 백엔드 (Node.js Express) =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ddalkkak-backend
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ddalkkak
      - DB_USER=postgres
      - DB_PASSWORD=ddalkkak2024!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=ddalkkak2024!
      - AI_ENGINE_URL=http://ai-engine:8001
      - JWT_SECRET=your_super_secret_jwt_key_development
      - ENCRYPTION_KEY=development_encryption_key_32ch
    ports:
      - "3000:3000"
      - "8080:8080"  # WebSocket
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-engine:
        condition: service_started
    restart: unless-stopped

  # ===== 프론트엔드 (Web Dashboard) =====
  web-dashboard:
    build:
      context: ./frontend/web-dashboard
      dockerfile: Dockerfile
    container_name: ddalkkak-web-dashboard
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_WS_URL=ws://localhost:8080
    ports:
      - "3001:3001"
    volumes:
      - ./frontend/web-dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # ===== 파일 저장소 (MinIO - S3 대체) =====
  minio:
    image: minio/minio:latest
    container_name: ddalkkak-minio
    environment:
      MINIO_ROOT_USER: ddalkkak
      MINIO_ROOT_PASSWORD: ddalkkak2024!
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # ===== 데이터베이스 관리 (pgAdmin) =====
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ddalkkak-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ddalkkak.com
      PGADMIN_DEFAULT_PASSWORD: ddalkkak2024!
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

  # ===== 모니터링 - Prometheus =====
  prometheus:
    image: prom/prometheus:latest
    container_name: ddalkkak-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # ===== 모니터링 - Grafana =====
  grafana:
    image: grafana/grafana:latest
    container_name: ddalkkak-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ddalkkak2024!
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # ===== 로그 수집 - Elasticsearch =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ddalkkak-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # ===== 로그 수집 - Kibana =====
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ddalkkak-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

# ===== 데이터 볼륨 =====
volumes:
  postgres_data:
  redis_data:
  minio_data:
  ai_models:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

# ===== 네트워크 =====
networks:
  default:
    driver: bridge
    name: ddalkkak-network